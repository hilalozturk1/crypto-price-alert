version: '3.8'

services:
  mongodb: # MongoDB service
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network

  redis: # Redis service
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-alert-api
    ports:
      - "3000:3000"
    environment:
      MONGO_URI: mongodb://mongodb:27017/cryptoalerts
      REDIS_URL: redis://redis:6379
      PORT: 3000
      COINGECKO_API_URL: ${COINGECKO_API_URL}
      CRYPTO_SYMBOLS: ${CRYPTO_SYMBOLS}
      ALERT_CHECK_INTERVAL_MINUTES: ${ALERT_CHECK_INTERVAL_MINUTES}
      NODE_ENV: production
    depends_on:
      - mongodb
      - redis
    networks:
      - app-network

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-alert-worker
    environment:
      MONGO_URI: mongodb://mongodb:27017/cryptoalerts
      REDIS_URL: redis://redis:6379
      COINGECKO_API_URL: ${COINGECKO_API_URL}
      CRYPTO_SYMBOLS: ${CRYPTO_SYMBOLS}
      ALERT_CHECK_INTERVAL_MINUTES: ${ALERT_CHECK_INTERVAL_MINUTES}
      NODE_ENV: production
    depends_on:
      - mongodb
      - redis
    networks:
      - app-network
    command: ["npm", "run", "start:worker"]

  test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-alert-test
    environment:
      MONGO_URI: mongodb://mongodb:27017/cryptoalerts
      REDIS_URL: redis://redis:6379
      NODE_ENV: test
    depends_on:
      - mongodb
      - redis
    networks:
      - app-network
    command: ["npm", "test"]
    
  prometheus: # Prometheus service
      image: prom/prometheus:latest
      container_name: prometheus-server
      ports:
        - "9090:9090"
      volumes:
        - ./prometheus.yml:/etc/prometheus/prometheus.yml
      command: --config.file=/etc/prometheus/prometheus.yml
      depends_on:
        - api
      networks:
        - app-network
      restart: always

  grafana: # Grafana service
      image: grafana/grafana:latest
      container_name: grafana-server
      ports:
        - "3001:3000"
      volumes:
        - grafana-data:/var/lib/grafana
      environment:
        GF_PATHS_PROVISIONING: /etc/grafana/provisioning
        GF_AUTH_ANONYMOUS_ENABLED: true
        GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
      depends_on:
        - prometheus
      networks:
        - app-network
      restart: always

volumes:
  mongo-data:
  redis-data:
  grafana-data:

networks:
  app-network:
    driver: bridge